//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameTable
{
    using System;
    using System.IO;
    using System.Collections.Generic;
    using UnityEngine;
    
    
    public class StageTableData
    {
        
        /// <summary>
        /// Table index
        /// </summary>
        public int Index;
        
        /// <summary>
        /// Major Stage
        /// </summary>
        public int MajorStage;
        
        /// <summary>
        /// Minor Stage
        /// </summary>
        public int MinorStage;
        
        /// <summary>
        /// Enemy Index 01
        /// </summary>
        public int EnemyIndex1;
        
        /// <summary>
        /// Enemy Count 01
        /// </summary>
        public int EnemyCount1;
        
        /// <summary>
        /// Enemy Index 02
        /// </summary>
        public int EnemyIndex2;
        
        /// <summary>
        /// Enemy Count 02
        /// </summary>
        public int EnemyCount2;
        
        /// <summary>
        /// Enemy Index 03
        /// </summary>
        public int EnemyIndex3;
        
        /// <summary>
        /// Enemy Count 03
        /// </summary>
        public int EnemyCount3;
        
        /// <summary>
        /// Enemy Index 04
        /// </summary>
        public int EnemyIndex4;
        
        /// <summary>
        /// Enemy Count 04
        /// </summary>
        public int EnemyCount4;
    }
    
    public partial class StageTable
    {
        
        private static Dictionary<int, StageTableData> Datas = new Dictionary<int, StageTableData>();
        
        public virtual void LoadTable()
        {
            var bytes = Resources.Load<TextAsset>(@"Tables/StageTable").bytes;
            //var bytes = File.ReadAllBytes(@"StageTable.bytes");

            using (var memoryStream = new MemoryStream(bytes))
            {
                using (var reader = new BinaryReader(memoryStream))
                {
                    while (memoryStream.Position < memoryStream.Length)
                    {
                        var _Index = reader.ReadInt32();
                        var _MajorStage = reader.ReadInt32();
                        var _MinorStage = reader.ReadInt32();
                        var _EnemyIndex1 = reader.ReadInt32();
                        var _EnemyCount1 = reader.ReadInt32();
                        var _EnemyIndex2 = reader.ReadInt32();
                        var _EnemyCount2 = reader.ReadInt32();
                        var _EnemyIndex3 = reader.ReadInt32();
                        var _EnemyCount3 = reader.ReadInt32();
                        var _EnemyIndex4 = reader.ReadInt32();
                        var _EnemyCount4 = reader.ReadInt32();


                        var addingTable = new StageTableData
                        {
                            Index = _Index,
                            MajorStage = _MajorStage,
                            MinorStage = _MinorStage,
                            EnemyIndex1 = _EnemyIndex1,
                            EnemyCount1 = _EnemyCount1,
                            EnemyIndex2 = _EnemyIndex2,
                            EnemyCount2 = _EnemyCount2,
                            EnemyIndex3 = _EnemyIndex3,
                            EnemyCount3 = _EnemyCount3,
                            EnemyIndex4 = _EnemyIndex4,
                            EnemyCount4 = _EnemyCount4,
                        };
                        
                        Datas.Add( _Index, addingTable);
                    }
                }
            }
            return;
        }
        
        public virtual StageTableData GetData(int index)
        {
            if (!Datas.TryGetValue(index, out var returnValue))
                return null;

            return returnValue;
        }
    }
}
