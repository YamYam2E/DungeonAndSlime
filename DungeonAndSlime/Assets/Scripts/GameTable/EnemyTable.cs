//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameTable
{
    using System;
    using System.IO;
    using System.Collections.Generic;
    using UnityEngine;
    
    
    public class EnemyTableData
    {
        
        /// <summary>
        /// Enemy Index
        /// </summary>
        public int Index;
        
        /// <summary>
        /// Title of Enemy
        /// </summary>
        public string Title;
        
        /// <summary>
        /// Enemy Name
        /// </summary>
        public string Name;
        
        /// <summary>
        /// 
        /// </summary>
        public int AttackPower;
        
        /// <summary>
        /// 
        /// </summary>
        public float AttackSpeed;
        
        /// <summary>
        /// 
        /// </summary>
        public float AttackRange;
        
        /// <summary>
        /// 
        /// </summary>
        public int AttackPowerRate;
        
        /// <summary>
        /// Hitpoint
        /// </summary>
        public int Hp;
        
        /// <summary>
        /// 
        /// </summary>
        public int Protection;
        
        /// <summary>
        /// 
        /// </summary>
        public int CriticalPower;
        
        /// <summary>
        /// 
        /// </summary>
        public int CriticalRate;
        
        /// <summary>
        /// Default = 4
        /// </summary>
        public int MoveSpeed;
    }
    
    public partial class EnemyTable
    {
        
        private static Dictionary<int, EnemyTableData> Datas = new Dictionary<int, EnemyTableData>();
        
        public virtual void LoadTable()
        {
            var bytes = Resources.Load<TextAsset>(@"Tables/EnemyTable").bytes;
            //var bytes = File.ReadAllBytes(@"EnemyTable.bytes");

            using (var memoryStream = new MemoryStream(bytes))
            {
                using (var reader = new BinaryReader(memoryStream))
                {
                    while (memoryStream.Position < memoryStream.Length)
                    {
                        var _Index = reader.ReadInt32();
                        var _Title = reader.ReadString();
                        var _Name = reader.ReadString();
                        var _AttackPower = reader.ReadInt32();
                        var _AttackSpeed = reader.ReadSingle();
                        var _AttackRange = reader.ReadSingle();
                        var _AttackPowerRate = reader.ReadInt32();
                        var _Hp = reader.ReadInt32();
                        var _Protection = reader.ReadInt32();
                        var _CriticalPower = reader.ReadInt32();
                        var _CriticalRate = reader.ReadInt32();
                        var _MoveSpeed = reader.ReadInt32();


                        var addingTable = new EnemyTableData
                        {
                            Index = _Index,
                            Title = _Title,
                            Name = _Name,
                            AttackPower = _AttackPower,
                            AttackSpeed = _AttackSpeed,
                            AttackRange = _AttackRange,
                            AttackPowerRate = _AttackPowerRate,
                            Hp = _Hp,
                            Protection = _Protection,
                            CriticalPower = _CriticalPower,
                            CriticalRate = _CriticalRate,
                            MoveSpeed = _MoveSpeed,
                        };
                        
                        Datas.Add( _Index, addingTable);
                    }
                }
            }
            return;
        }
        
        public virtual EnemyTableData GetData(int index)
        {
            if (!Datas.TryGetValue(index, out var returnValue))
                return null;

            return returnValue;
        }
    }
}
